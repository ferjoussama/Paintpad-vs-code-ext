{"version":3,"file":"extension.js","mappings":"23BAIA,oBAAyBA,GACvB,MAAMC,EAAW,IAAIC,EAAqBF,EAAQG,cAElDH,EAAQI,cAAcC,KACpBC,EAAOC,OAAOC,4BAA4BN,EAAqBO,SAAUR,IAG3E,IAAIS,EAAiBJ,EAAOK,SAASC,gBAAgB,iBAAiB,KACpEN,EAAOK,SAASE,eAAe,4CAA4C,IAG7Eb,EAAQI,cAAcC,KAAKK,EAC7B,EAhBA,kBACA,YACA,YAgBA,MAAMR,EAMeY,cALZC,gBAA2B,kBAE1BC,MAER,WAAAC,CACmBH,GAAA,KAAAA,cAAAA,CACf,CAEG,kBAAAI,CACLC,EACAnB,EACAoB,GAEAC,KAAKL,MAAQG,EAEbA,EAAYG,QAAQC,QAAU,CAC5BC,eAAe,EACfC,mBAAoB,CAClBJ,KAAKP,gBAITK,EAAYG,QAAQI,KAAOL,KAAKM,mBAAmBR,EAAYG,SAE/DH,EAAYG,QAAQM,qBAAoBC,MAAMC,IAC5C,GACO,SADCA,EAAKC,KACX,CACE,MAAMC,EAAmB1B,EAAO2B,UAAUD,iBAC1C,IAAKA,EAEH,YADA1B,EAAOC,OAAO2B,iBAAiB,4BAGjC,MAAMC,EAAaH,EAAiB,GAAGI,IAAIC,OACrCC,QAAiBhC,EAAOC,OAAOgC,aAAa,CAChDC,OAAQ,kBACRC,YAAa,eAEf,GAAIH,EAAU,CACZ,MAAMI,EAAWC,EAAKC,KAAKT,EAAYG,GACvCO,EAAGC,UAAUJ,EAAUK,OAAOC,KAAKlB,EAAKmB,UAAUC,MAAM,KAAK,GAAI,WAAYC,IACvEA,EACF7C,EAAOC,OAAO2B,iBAAiB,4BAE/B5B,EAAOC,OAAO6C,uBAAuB,YAAYV,IACnD,GAEJ,CACK,CACT,GAEJ,CAEQ,kBAAAf,CAAmBL,GACzB,MAAO,wqRA6NT,E,UCrSF+B,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,K,UCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://paintpad/./src/extension.ts","webpack://paintpad/external commonjs \"vscode\"","webpack://paintpad/external node-commonjs \"fs\"","webpack://paintpad/external node-commonjs \"path\"","webpack://paintpad/webpack/bootstrap","webpack://paintpad/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport function activate(context: vscode.ExtensionContext) {\n  const provider = new PaintPadViewProvider(context.extensionUri);\n\n  context.subscriptions.push(\n    vscode.window.registerWebviewViewProvider(PaintPadViewProvider.viewType, provider)\n  );\n\n  let openDisposable = vscode.commands.registerCommand('paintpad.open', () => {\n    vscode.commands.executeCommand('workbench.view.extension.paintpad-sidebar');\n  });\n\n  context.subscriptions.push(openDisposable);\n}\n\nclass PaintPadViewProvider implements vscode.WebviewViewProvider {\n  public static readonly viewType = 'paintpad-canvas';\n\n  private _view?: vscode.WebviewView;\n\n  constructor(\n    private readonly _extensionUri: vscode.Uri,\n  ) { }\n\n  public resolveWebviewView(\n    webviewView: vscode.WebviewView,\n    context: vscode.WebviewViewResolveContext,\n    _token: vscode.CancellationToken,\n  ) {\n    this._view = webviewView;\n\n    webviewView.webview.options = {\n      enableScripts: true,\n      localResourceRoots: [\n        this._extensionUri\n      ]\n    };\n\n    webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\n\n    webviewView.webview.onDidReceiveMessage(async data => {\n      switch (data.type) {\n        case 'save':\n          const workspaceFolders = vscode.workspace.workspaceFolders;\n          if (!workspaceFolders) {\n            vscode.window.showErrorMessage('No workspace folder open');\n            return;\n          }\n          const folderPath = workspaceFolders[0].uri.fsPath;\n          const fileName = await vscode.window.showInputBox({\n            prompt: 'Enter file name',\n            placeHolder: 'sketch.png'\n          });\n          if (fileName) {\n            const filePath = path.join(folderPath, fileName);\n            fs.writeFile(filePath, Buffer.from(data.imageData.split(',')[1], 'base64'), (err) => {\n              if (err) {\n                vscode.window.showErrorMessage('Failed to save the image');\n              } else {\n                vscode.window.showInformationMessage(`Saved to ${filePath}`);\n              }\n            });\n          }\n          break;\n      }\n    });\n  }\n\n  private _getHtmlForWebview(webview: vscode.Webview) {\n    return `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n          <meta charset=\"UTF-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>PaintPad</title>\n          <style>\n              body {\n                  padding: 0;\n                  margin: 0;\n                  color: var(--vscode-foreground);\n                  font-family: var(--vscode-font-family);\n              }\n              #paint-app {\n                  display: flex;\n                  flex-direction: column;\n                  height: 100vh;\n              }\n              #toolbar {\n                  display: flex;\n                  flex-wrap: wrap;\n                  padding: 10px;\n                  background-color: var(--vscode-editor-background);\n                  border-bottom: 1px solid var(--vscode-panel-border);\n              }\n              #canvas-container {\n                  position: relative;\n                  flex-grow: 1;\n              }\n              #canvas {\n                  position: absolute;\n                  top: 0;\n                  left: 0;\n                  width: 100%;\n                  height: 100%;\n                  border: 1px solid var(--vscode-panel-border);\n              }\n              #size-indicator {\n                  position: absolute;\n                  pointer-events: none;\n                  display: none;\n                  border: 2px solid var(--vscode-editor-foreground);\n                  border-radius: 50%;\n                  opacity: 0.5;\n              }\n              button {\n                  margin-right: 5px;\n                  margin-bottom: 5px;\n                  padding: 5px 10px;\n                  background-color: var(--vscode-button-background);\n                  color: var(--vscode-button-foreground);\n                  border: none;\n                  cursor: pointer;\n              }\n              button:hover {\n                  background-color: var(--vscode-button-hoverBackground);\n              }\n              .tool-group {\n                  display: flex;\n                  align-items: center;\n                  margin-right: 10px;\n                  margin-bottom: 5px;\n              }\n              .tool-group label {\n                  margin-right: 5px;\n              }\n              input[type=\"range\"] {\n                  width: 100px;\n              }\n              #color-picker {\n                  margin-right: 10px;\n              }\n          </style>\n      </head>\n      <body>\n          <div id=\"paint-app\">\n              <div id=\"toolbar\">\n                  <button id=\"brush\">Brush</button>\n                  <button id=\"eraser\">Eraser</button>\n                  <div class=\"tool-group\">\n                      <label for=\"brush-size\">Brush Size:</label>\n                      <input type=\"range\" id=\"brush-size\" min=\"1\" max=\"50\" value=\"2\">\n                      <span id=\"brush-size-value\">2</span>\n                  </div>\n                  <div class=\"tool-group\">\n                      <label for=\"eraser-size\">Eraser Size:</label>\n                      <input type=\"range\" id=\"eraser-size\" min=\"1\" max=\"50\" value=\"20\">\n                      <span id=\"eraser-size-value\">20</span>\n                  </div>\n                  <input type=\"color\" id=\"color-picker\" value=\"#000000\">\n                  <button id=\"clear\">Clear</button>\n                  <button id=\"save\">Save</button>\n              </div>\n              <div id=\"canvas-container\">\n                  <canvas id=\"canvas\"></canvas>\n                  <div id=\"size-indicator\"></div>\n              </div>\n          </div>\n          <script>\n              const vscode = acquireVsCodeApi();\n              const canvas = document.getElementById('canvas');\n              const ctx = canvas.getContext('2d');\n              const sizeIndicator = document.getElementById('size-indicator');\n              let isDrawing = false;\n              let currentTool = 'brush';\n              let currentColor = '#000000';\n              let brushSize = 2;\n              let eraserSize = 20;\n\n              // Set canvas size\n              function resizeCanvas() {\n                  canvas.width = canvas.clientWidth;\n                  canvas.height = canvas.clientHeight;\n                  clearCanvas();\n              }\n              resizeCanvas();\n              window.addEventListener('resize', resizeCanvas);\n\n              // Clear canvas\n              function clearCanvas() {\n                  ctx.fillStyle = '#ffffff';\n                  ctx.fillRect(0, 0, canvas.width, canvas.height);\n              }\n\n              // Tool selection\n              document.getElementById('brush').addEventListener('click', () => currentTool = 'brush');\n              document.getElementById('eraser').addEventListener('click', () => currentTool = 'eraser');\n              document.getElementById('color-picker').addEventListener('input', (e) => {\n                  currentColor = e.target.value;\n              });\n\n              // Size controls\n              const brushSizeSlider = document.getElementById('brush-size');\n              const brushSizeValue = document.getElementById('brush-size-value');\n              brushSizeSlider.addEventListener('input', (e) => {\n                  brushSize = parseInt(e.target.value);\n                  brushSizeValue.textContent = brushSize;\n                  updateSizeIndicator();\n              });\n\n              const eraserSizeSlider = document.getElementById('eraser-size');\n              const eraserSizeValue = document.getElementById('eraser-size-value');\n              eraserSizeSlider.addEventListener('input', (e) => {\n                  eraserSize = parseInt(e.target.value);\n                  eraserSizeValue.textContent = eraserSize;\n                  updateSizeIndicator();\n              });\n\n              // Clear functionality\n              document.getElementById('clear').addEventListener('click', clearCanvas);\n\n              // Save functionality\n              document.getElementById('save').addEventListener('click', () => {\n                  const imageData = canvas.toDataURL('image/png');\n                  vscode.postMessage({ type: 'save', imageData: imageData });\n              });\n\n              // Drawing functions\n              canvas.addEventListener('mousedown', startDrawing);\n              canvas.addEventListener('mousemove', draw);\n              canvas.addEventListener('mouseup', stopDrawing);\n              canvas.addEventListener('mouseout', stopDrawing);\n\n              function startDrawing(e) {\n                  isDrawing = true;\n                  draw(e);\n              }\n\n              function draw(e) {\n                  updateSizeIndicator(e);\n                  if (!isDrawing) return;\n                  const rect = canvas.getBoundingClientRect();\n                  const x = e.clientX - rect.left;\n                  const y = e.clientY - rect.top;\n\n                  ctx.lineWidth = currentTool === 'eraser' ? eraserSize : brushSize;\n                  ctx.lineCap = 'round';\n                  ctx.strokeStyle = currentTool === 'eraser' ? '#ffffff' : currentColor;\n\n                  ctx.lineTo(x, y);\n                  ctx.stroke();\n                  ctx.beginPath();\n                  ctx.moveTo(x, y);\n              }\n\n              function stopDrawing() {\n                  isDrawing = false;\n                  ctx.beginPath();\n                  sizeIndicator.style.display = 'none';\n              }\n\n              function updateSizeIndicator(e) {\n                  const size = currentTool === 'eraser' ? eraserSize : brushSize;\n                  sizeIndicator.style.width = size + 'px';\n                  sizeIndicator.style.height = size + 'px';\n                  \n                  if (e) {\n                      const rect = canvas.getBoundingClientRect();\n                      const x = e.clientX - rect.left;\n                      const y = e.clientY - rect.top;\n                      sizeIndicator.style.left = (x - size / 2) + 'px';\n                      sizeIndicator.style.top = (y - size / 2) + 'px';\n                  }\n\n                  sizeIndicator.style.display = 'block';\n              }\n\n              // Show size indicator on mouse enter\n              canvas.addEventListener('mouseenter', (e) => {\n                  updateSizeIndicator(e);\n              });\n\n              // Hide size indicator on mouse leave\n              canvas.addEventListener('mouseleave', () => {\n                  sizeIndicator.style.display = 'none';\n              });\n          </script>\n      </body>\n      </html>\n    `;\n  }\n}","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","provider","PaintPadViewProvider","extensionUri","subscriptions","push","vscode","window","registerWebviewViewProvider","viewType","openDisposable","commands","registerCommand","executeCommand","_extensionUri","static","_view","constructor","resolveWebviewView","webviewView","_token","this","webview","options","enableScripts","localResourceRoots","html","_getHtmlForWebview","onDidReceiveMessage","async","data","type","workspaceFolders","workspace","showErrorMessage","folderPath","uri","fsPath","fileName","showInputBox","prompt","placeHolder","filePath","path","join","fs","writeFile","Buffer","from","imageData","split","err","showInformationMessage","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}