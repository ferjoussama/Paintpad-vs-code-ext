(()=>{"use strict";var e={265:function(e,n,t){var i,r=this&&this.__createBinding||(Object.create?function(e,n,t,i){void 0===i&&(i=t);var r=Object.getOwnPropertyDescriptor(n,t);r&&!("get"in r?!n.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,i,r)}:function(e,n,t,i){void 0===i&&(i=t),e[i]=n[t]}),a=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||(i=function(e){return i=Object.getOwnPropertyNames||function(e){var n=[];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[n.length]=t);return n},i(e)},function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t=i(e),o=0;o<t.length;o++)"default"!==t[o]&&r(n,e,t[o]);return a(n,e),n});Object.defineProperty(n,"__esModule",{value:!0}),n.activate=function(e){const n=new l(e.extensionUri);e.subscriptions.push(s.window.registerWebviewViewProvider(l.viewType,n));let t=s.commands.registerCommand("paintpad.open",(()=>{s.commands.executeCommand("workbench.view.extension.paintpad-sidebar")}));e.subscriptions.push(t)};const s=o(t(398)),c=o(t(896)),d=o(t(928));class l{_extensionUri;static viewType="paintpad-canvas";_view;constructor(e){this._extensionUri=e}resolveWebviewView(e,n,t){this._view=e,e.webview.options={enableScripts:!0,localResourceRoots:[this._extensionUri]},e.webview.html=this._getHtmlForWebview(e.webview),e.webview.onDidReceiveMessage((async e=>{if("save"===e.type){const n=s.workspace.workspaceFolders;if(!n)return void s.window.showErrorMessage("No workspace folder open");const t=n[0].uri.fsPath,i=await s.window.showInputBox({prompt:"Enter file name",placeHolder:"sketch.png"});if(i){const n=d.join(t,i);c.writeFile(n,Buffer.from(e.imageData.split(",")[1],"base64"),(e=>{e?s.window.showErrorMessage("Failed to save the image"):s.window.showInformationMessage(`Saved to ${n}`)}))}}}))}_getHtmlForWebview(e){return"\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n          <meta charset=\"UTF-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>PaintPad</title>\n          <style>\n              body {\n                  padding: 0;\n                  margin: 0;\n                  color: var(--vscode-foreground);\n                  font-family: var(--vscode-font-family);\n              }\n              #paint-app {\n                  display: flex;\n                  flex-direction: column;\n                  height: 100vh;\n              }\n              #toolbar {\n                  display: flex;\n                  flex-wrap: wrap;\n                  padding: 10px;\n                  background-color: var(--vscode-editor-background);\n                  border-bottom: 1px solid var(--vscode-panel-border);\n              }\n              #canvas-container {\n                  position: relative;\n                  flex-grow: 1;\n              }\n              #canvas {\n                  position: absolute;\n                  top: 0;\n                  left: 0;\n                  width: 100%;\n                  height: 100%;\n                  border: 1px solid var(--vscode-panel-border);\n              }\n              #size-indicator {\n                  position: absolute;\n                  pointer-events: none;\n                  display: none;\n                  border: 2px solid var(--vscode-editor-foreground);\n                  border-radius: 50%;\n                  opacity: 0.5;\n              }\n              button {\n                  margin-right: 5px;\n                  margin-bottom: 5px;\n                  padding: 5px 10px;\n                  background-color: var(--vscode-button-background);\n                  color: var(--vscode-button-foreground);\n                  border: none;\n                  cursor: pointer;\n              }\n              button:hover {\n                  background-color: var(--vscode-button-hoverBackground);\n              }\n              .tool-group {\n                  display: flex;\n                  align-items: center;\n                  margin-right: 10px;\n                  margin-bottom: 5px;\n              }\n              .tool-group label {\n                  margin-right: 5px;\n              }\n              input[type=\"range\"] {\n                  width: 100px;\n              }\n              #color-picker {\n                  margin-right: 10px;\n              }\n          </style>\n      </head>\n      <body>\n          <div id=\"paint-app\">\n              <div id=\"toolbar\">\n                  <button id=\"brush\">Brush</button>\n                  <button id=\"eraser\">Eraser</button>\n                  <div class=\"tool-group\">\n                      <label for=\"brush-size\">Brush Size:</label>\n                      <input type=\"range\" id=\"brush-size\" min=\"1\" max=\"50\" value=\"2\">\n                      <span id=\"brush-size-value\">2</span>\n                  </div>\n                  <div class=\"tool-group\">\n                      <label for=\"eraser-size\">Eraser Size:</label>\n                      <input type=\"range\" id=\"eraser-size\" min=\"1\" max=\"50\" value=\"20\">\n                      <span id=\"eraser-size-value\">20</span>\n                  </div>\n                  <input type=\"color\" id=\"color-picker\" value=\"#000000\">\n                  <button id=\"clear\">Clear</button>\n                  <button id=\"save\">Save</button>\n              </div>\n              <div id=\"canvas-container\">\n                  <canvas id=\"canvas\"></canvas>\n                  <div id=\"size-indicator\"></div>\n              </div>\n          </div>\n          <script>\n              const vscode = acquireVsCodeApi();\n              const canvas = document.getElementById('canvas');\n              const ctx = canvas.getContext('2d');\n              const sizeIndicator = document.getElementById('size-indicator');\n              let isDrawing = false;\n              let currentTool = 'brush';\n              let currentColor = '#000000';\n              let brushSize = 2;\n              let eraserSize = 20;\n\n              // Set canvas size\n              function resizeCanvas() {\n                  canvas.width = canvas.clientWidth;\n                  canvas.height = canvas.clientHeight;\n                  clearCanvas();\n              }\n              resizeCanvas();\n              window.addEventListener('resize', resizeCanvas);\n\n              // Clear canvas\n              function clearCanvas() {\n                  ctx.fillStyle = '#ffffff';\n                  ctx.fillRect(0, 0, canvas.width, canvas.height);\n              }\n\n              // Tool selection\n              document.getElementById('brush').addEventListener('click', () => currentTool = 'brush');\n              document.getElementById('eraser').addEventListener('click', () => currentTool = 'eraser');\n              document.getElementById('color-picker').addEventListener('input', (e) => {\n                  currentColor = e.target.value;\n              });\n\n              // Size controls\n              const brushSizeSlider = document.getElementById('brush-size');\n              const brushSizeValue = document.getElementById('brush-size-value');\n              brushSizeSlider.addEventListener('input', (e) => {\n                  brushSize = parseInt(e.target.value);\n                  brushSizeValue.textContent = brushSize;\n                  updateSizeIndicator();\n              });\n\n              const eraserSizeSlider = document.getElementById('eraser-size');\n              const eraserSizeValue = document.getElementById('eraser-size-value');\n              eraserSizeSlider.addEventListener('input', (e) => {\n                  eraserSize = parseInt(e.target.value);\n                  eraserSizeValue.textContent = eraserSize;\n                  updateSizeIndicator();\n              });\n\n              // Clear functionality\n              document.getElementById('clear').addEventListener('click', clearCanvas);\n\n              // Save functionality\n              document.getElementById('save').addEventListener('click', () => {\n                  const imageData = canvas.toDataURL('image/png');\n                  vscode.postMessage({ type: 'save', imageData: imageData });\n              });\n\n              // Drawing functions\n              canvas.addEventListener('mousedown', startDrawing);\n              canvas.addEventListener('mousemove', draw);\n              canvas.addEventListener('mouseup', stopDrawing);\n              canvas.addEventListener('mouseout', stopDrawing);\n\n              function startDrawing(e) {\n                  isDrawing = true;\n                  draw(e);\n              }\n\n              function draw(e) {\n                  updateSizeIndicator(e);\n                  if (!isDrawing) return;\n                  const rect = canvas.getBoundingClientRect();\n                  const x = e.clientX - rect.left;\n                  const y = e.clientY - rect.top;\n\n                  ctx.lineWidth = currentTool === 'eraser' ? eraserSize : brushSize;\n                  ctx.lineCap = 'round';\n                  ctx.strokeStyle = currentTool === 'eraser' ? '#ffffff' : currentColor;\n\n                  ctx.lineTo(x, y);\n                  ctx.stroke();\n                  ctx.beginPath();\n                  ctx.moveTo(x, y);\n              }\n\n              function stopDrawing() {\n                  isDrawing = false;\n                  ctx.beginPath();\n                  sizeIndicator.style.display = 'none';\n              }\n\n              function updateSizeIndicator(e) {\n                  const size = currentTool === 'eraser' ? eraserSize : brushSize;\n                  sizeIndicator.style.width = size + 'px';\n                  sizeIndicator.style.height = size + 'px';\n                  \n                  if (e) {\n                      const rect = canvas.getBoundingClientRect();\n                      const x = e.clientX - rect.left;\n                      const y = e.clientY - rect.top;\n                      sizeIndicator.style.left = (x - size / 2) + 'px';\n                      sizeIndicator.style.top = (y - size / 2) + 'px';\n                  }\n\n                  sizeIndicator.style.display = 'block';\n              }\n\n              // Show size indicator on mouse enter\n              canvas.addEventListener('mouseenter', (e) => {\n                  updateSizeIndicator(e);\n              });\n\n              // Hide size indicator on mouse leave\n              canvas.addEventListener('mouseleave', () => {\n                  sizeIndicator.style.display = 'none';\n              });\n          <\/script>\n      </body>\n      </html>\n    "}}},398:e=>{e.exports=require("vscode")},896:e=>{e.exports=require("fs")},928:e=>{e.exports=require("path")}},n={},t=function t(i){var r=n[i];if(void 0!==r)return r.exports;var a=n[i]={exports:{}};return e[i].call(a.exports,a,a.exports,t),a.exports}(265);module.exports=t})();